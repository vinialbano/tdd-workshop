services:
  postgres:
    image: postgres:16-alpine
    restart: unless-stopped
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    env_file:
      - apps/api/.env
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - tdd-workshop
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
      args:
        - TURBO_TEAM=${TURBO_TEAM}
        - TURBO_TOKEN=${TURBO_TOKEN}
    restart: unless-stopped
    ports:
      - "${API_PORT:-4000}:4000"
    env_file:
      - apps/api/.env
    environment:
      - NODE_ENV=production
      - PORT=4000
      - DB_HOST=postgres
      - CORS_ORIGIN=http://localhost:8080
    networks:
      - tdd-workshop
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  web:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
      args:
        - TURBO_TEAM=${TURBO_TEAM}
        - TURBO_TOKEN=${TURBO_TOKEN}
    restart: unless-stopped
    ports:
      - "${WEB_PORT:-8080}:80"
    depends_on:
      api:
        condition: service_healthy
    networks:
      - tdd-workshop
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

networks:
  tdd-workshop:
    name: tdd-workshop

volumes:
  postgres_data: 